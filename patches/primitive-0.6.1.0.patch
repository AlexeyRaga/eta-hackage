From b21970742525771f38ebcb60c157e5ef22a5ac77 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Fri, 16 Dec 2016 13:30:44 +0530
Subject: [PATCH] Patched

---
 Data/Primitive/ByteArray.hs           |   2 +-
 Data/Primitive/Internal/Operations.hs |  57 ++++++++---------
 Data/Primitive/MachDeps.hs            |  72 ++++++++++++++++++++-
 java/Utils.java                       | 116 ++++++++++++++++++++++++++++++++++
 primitive.cabal                       |  17 ++---
 5 files changed, 225 insertions(+), 39 deletions(-)
 create mode 100644 java/Utils.java

diff --git a/Data/Primitive/ByteArray.hs b/Data/Primitive/ByteArray.hs
index 2cce7ae..71bd0a1 100644
--- a/Data/Primitive/ByteArray.hs
+++ b/Data/Primitive/ByteArray.hs
@@ -248,7 +248,7 @@ foreign import ccall unsafe "primitive-memops.h hsprimitive_memcpy"
             -> CSize -> IO ()
 #endif

-foreign import ccall unsafe "primitive-memops.h hsprimitive_memmove"
+foreign import java unsafe "@static eta.primitive.Utils.memmove"
   memmove_mba :: MutableByteArray# s -> CInt
               -> MutableByteArray# s -> CInt
               -> CSize -> IO ()
diff --git a/Data/Primitive/Internal/Operations.hs b/Data/Primitive/Internal/Operations.hs
index 091e11f..34c897c 100644
--- a/Data/Primitive/Internal/Operations.hs
+++ b/Data/Primitive/Internal/Operations.hs
@@ -30,61 +30,60 @@ import Data.Primitive.MachDeps (Word64_#, Int64_#)
 import Foreign.C.Types
 import GHC.Prim

-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word8"
+foreign import java unsafe "@static eta.primitive.Utils.memset_ba"
   setWord8Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word16"
+foreign import java unsafe "@static eta.primitive.Utils.memset_short_ba"
   setWord16Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word32"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int_ba"
   setWord32Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word64"
+foreign import java unsafe "@static eta.primitive.Utils.memset_long_ba"
   setWord64Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Word64_# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int_ba"
   setWordArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word8"
+foreign import java unsafe "@static eta.primitive.Utils.memset_ba"
   setInt8Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word16"
+foreign import java unsafe "@static eta.primitive.Utils.memset_short_ba"
   setInt16Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word32"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int_ba"
   setInt32Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word64"
+foreign import java unsafe "@static eta.primitive.Utils.memset_long_ba"
   setInt64Array# :: MutableByteArray# s -> CPtrdiff -> CSize -> Int64_# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int_ba"
   setIntArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Ptr"
+foreign import java unsafe "@static eta.primitive.Utils.memset_ptr_ba"
   setAddrArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Addr# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Float"
+foreign import java unsafe "@static eta.primitive.Utils.memset_float_ba"
   setFloatArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Float# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Double"
+foreign import java unsafe "@static eta.primitive.Utils.memset_double_ba"
   setDoubleArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Double# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Char"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int_ba"
   setWideCharArray# :: MutableByteArray# s -> CPtrdiff -> CSize -> Char# -> IO ()

-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word8"
+foreign import java unsafe "@static eta.primitive.Utils.memset"
   setWord8OffAddr# :: Addr# -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word16"
+foreign import java unsafe "@static eta.primitive.Utils.memset_short"
   setWord16OffAddr# :: Addr# -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word32"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int"
   setWord32OffAddr# :: Addr# -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word64"
+foreign import java unsafe "@static eta.primitive.Utils.memset_long"
   setWord64OffAddr# :: Addr# -> CPtrdiff -> CSize -> Word64_# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int"
   setWordOffAddr# :: Addr# -> CPtrdiff -> CSize -> Word# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word8"
+foreign import java unsafe "@static eta.primitive.Utils.memset"
   setInt8OffAddr# :: Addr# -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word16"
+foreign import java unsafe "@static eta.primitive.Utils.memset_short"
   setInt16OffAddr# :: Addr# -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word32"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int"
   setInt32OffAddr# :: Addr# -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word64"
+foreign import java unsafe "@static eta.primitive.Utils.memset_long"
   setInt64OffAddr# :: Addr# -> CPtrdiff -> CSize -> Int64_# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Word"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int"
   setIntOffAddr# :: Addr# -> CPtrdiff -> CSize -> Int# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Ptr"
+foreign import java unsafe "@static eta.primitive.Utils.memset_ptr"
   setAddrOffAddr# :: Addr# -> CPtrdiff -> CSize -> Addr# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Float"
+foreign import java unsafe "@static eta.primitive.Utils.memset_float"
   setFloatOffAddr# :: Addr# -> CPtrdiff -> CSize -> Float# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Double"
+foreign import java unsafe "@static eta.primitive.Utils.memset_double"
   setDoubleOffAddr# :: Addr# -> CPtrdiff -> CSize -> Double# -> IO ()
-foreign import ccall unsafe "primitive-memops.h hsprimitive_memset_Char"
+foreign import java unsafe "@static eta.primitive.Utils.memset_int"
   setWideCharOffAddr# :: Addr# -> CPtrdiff -> CSize -> Char# -> IO ()
-
diff --git a/Data/Primitive/MachDeps.hs b/Data/Primitive/MachDeps.hs
index d36c252..94fcbbf 100644
--- a/Data/Primitive/MachDeps.hs
+++ b/Data/Primitive/MachDeps.hs
@@ -12,7 +12,77 @@

 module Data.Primitive.MachDeps where

-#include "MachDeps.h"
+#define WORD_SIZE_IN_BITS 32
+
+#define ALIGNMENT_CHAR 1
+#define ALIGNMENT_DOUBLE 8
+#define ALIGNMENT_FLOAT 4
+#define ALIGNMENT_INT 4
+#define ALIGNMENT_LONG 8
+#define ALIGNMENT_SHORT 2
+#define ALIGNMENT_UNSIGNED_CHAR 1
+#define ALIGNMENT_UNSIGNED_INT 4
+#define ALIGNMENT_UNSIGNED_LONG 8
+#define ALIGNMENT_UNSIGNED_SHORT 2
+#define ALIGNMENT_VOID_P 4
+#define SIZEOF_CHAR 1
+#define SIZEOF_DOUBLE 8
+#define SIZEOF_FLOAT 4
+#define SIZEOF_INT 4
+#define SIZEOF_LONG 8
+#define SIZEOF_SHORT 2
+#define SIZEOF_UNSIGNED_CHAR 1
+#define SIZEOF_UNSIGNED_INT 4
+#define SIZEOF_UNSIGNED_LONG 8
+#define SIZEOF_UNSIGNED_SHORT 2
+#define SIZEOF_VOID_P 8
+
+#define SIZEOF_HSCHAR           SIZEOF_WORD32
+#define ALIGNMENT_HSCHAR        ALIGNMENT_WORD32
+
+#define SIZEOF_HSINT            SIZEOF_VOID_P
+#define ALIGNMENT_HSINT         ALIGNMENT_VOID_P
+
+#define SIZEOF_HSWORD           SIZEOF_VOID_P
+#define ALIGNMENT_HSWORD        ALIGNMENT_VOID_P
+
+#define SIZEOF_HSDOUBLE         SIZEOF_DOUBLE
+#define ALIGNMENT_HSDOUBLE      ALIGNMENT_DOUBLE
+
+#define SIZEOF_HSFLOAT          SIZEOF_FLOAT
+#define ALIGNMENT_HSFLOAT       ALIGNMENT_FLOAT
+
+#define SIZEOF_HSPTR            SIZEOF_VOID_P
+#define ALIGNMENT_HSPTR         ALIGNMENT_VOID_P
+
+#define SIZEOF_HSFUNPTR         SIZEOF_VOID_P
+#define ALIGNMENT_HSFUNPTR      ALIGNMENT_VOID_P
+
+#define SIZEOF_HSSTABLEPTR      SIZEOF_VOID_P
+#define ALIGNMENT_HSSTABLEPTR   ALIGNMENT_VOID_P
+
+#define SIZEOF_INT8             SIZEOF_CHAR
+#define ALIGNMENT_INT8          ALIGNMENT_CHAR
+
+#define SIZEOF_WORD8            SIZEOF_UNSIGNED_CHAR
+#define ALIGNMENT_WORD8         ALIGNMENT_UNSIGNED_CHAR
+
+#define SIZEOF_INT16            SIZEOF_SHORT
+#define ALIGNMENT_INT16         ALIGNMENT_SHORT
+
+#define SIZEOF_WORD16           SIZEOF_UNSIGNED_SHORT
+#define ALIGNMENT_WORD16        ALIGNMENT_UNSIGNED_SHORT
+
+#define SIZEOF_INT32            SIZEOF_INT
+#define ALIGNMENT_INT32         ALIGNMENT_INT
+
+#define SIZEOF_WORD32           SIZEOF_UNSIGNED_INT
+#define ALIGNMENT_WORD32        ALIGNMENT_UNSIGNED_INT
+
+#define SIZEOF_INT64            SIZEOF_LONG
+#define ALIGNMENT_INT64         ALIGNMENT_LONG
+#define SIZEOF_WORD64           SIZEOF_UNSIGNED_LONG
+#define ALIGNMENT_WORD64        ALIGNMENT_UNSIGNED_LONG

 import GHC.Prim

diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..3af1423
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,116 @@
+package eta.primitive;
+
+import java.nio.ByteBuffer;
+import eta.runtime.stg.StgClosure;
+import eta.runtime.io.StgByteArray;
+import eta.runtime.io.MemoryManager;
+
+public class Utils {
+    public static void memset(ByteBuffer buf, int offset, int n, int val) {
+        buf = buf.duplicate();
+        buf.position(offset);
+        while (n > 0) {
+            buf.put((byte) val);
+            --n;
+        }
+    }
+
+    public static void memset_short(ByteBuffer buf, int offset, int n, int val) {
+        buf = buf.duplicate();
+        buf.position(2 * offset);
+        while (n > 0) {
+            buf.putShort((short) val);
+            --n;
+        }
+    }
+
+    public static void memset_int(ByteBuffer buf, int offset, int n, int val) {
+        buf = buf.duplicate();
+        buf.position(4 * offset);
+        while (n > 0) {
+            buf.putInt(val);
+            --n;
+        }
+    }
+
+    public static void memset_long(ByteBuffer buf, int offset, int n, long val) {
+        buf = buf.duplicate();
+        buf.position(8 * offset);
+        while (n > 0) {
+            buf.putLong(val);
+            --n;
+        }
+    }
+
+    public static void memset_float(ByteBuffer buf, int offset, int n, float val) {
+        buf = buf.duplicate();
+        buf.position(4 * offset);
+        while (n > 0) {
+            buf.putFloat(val);
+            --n;
+        }
+    }
+
+    public static void memset_double(ByteBuffer buf, int offset, int n, double val) {
+        buf = buf.duplicate();
+        buf.position(8 * offset);
+        while (n > 0) {
+            buf.putDouble(val);
+            --n;
+        }
+    }
+
+    public static void memset_ptr(ByteBuffer buf, int offset, int n, ByteBuffer addr) {
+        buf = buf.duplicate();
+        int val = MemoryManager.getAddress(addr);
+        buf.position(4 * offset);
+        while (n > 0) {
+            buf.putInt(val);
+            --n;
+        }
+    }
+
+    public static void memset_ba(StgByteArray closure, int offset, int n, int val) {
+        memset(closure.buf, offset, n, val);
+    }
+
+    public static void memset_short_ba(StgByteArray closure, int offset, int n, int val) {
+        memset_short(closure.buf, offset, n, val);
+    }
+
+    public static void memset_int_ba(StgByteArray closure, int offset, int n, int val) {
+        memset_int(closure.buf, offset, n, val);
+    }
+
+    public static void memset_long_ba(StgByteArray closure, int offset, int n, long val) {
+        memset_long(closure.buf, offset, n, val);
+    }
+
+    public static void memset_float_ba(StgByteArray closure, int offset, int n, float val) {
+        memset_float(closure.buf, offset, n, val);
+    }
+
+    public static void memset_double_ba(StgByteArray closure, int offset, int n, double val) {
+        memset_double(closure.buf, offset, n, val);
+    }
+
+    public static void memset_ptr_ba(StgByteArray closure, int offset, int n, ByteBuffer addr) {
+        memset_ptr(closure.buf, offset, n, addr);
+    }
+
+    public static void memmove( StgByteArray srcArray, int srcOffset
+                              , StgByteArray destArray, int destOffset, int n) {
+        ByteBuffer src = srcArray.buf.duplicate();
+        ByteBuffer dest = destArray.buf.duplicate();
+        // TODO: Should we use allocateDirect instead?
+        // TODO: Check whether srcArray and destArray share the same
+        //       address. If so, avoid the intermediate ByteBuffer.
+        ByteBuffer copy = ByteBuffer.allocate(n);
+        src.position(srcOffset + 4);
+        src.limit(srcOffset + 4 + n);
+        copy.put(src);
+        copy.flip();
+        dest.position(destOffset + 4);
+        dest.put(copy);
+    }
+}
diff --git a/primitive.cabal b/primitive.cabal
index 232dccc..b6f1f61 100644
--- a/primitive.cabal
+++ b/primitive.cabal
@@ -36,16 +36,17 @@ Library
         Data.Primitive.Internal.Compat
         Data.Primitive.Internal.Operations

-  Build-Depends: base >= 4.3 && < 4.9
-               , ghc-prim >= 0.2 && < 0.5
-               , transformers >= 0.2 && < 0.5
+  Build-Depends: base >= 4.3 && < 4.10
+               , ghc-prim >= 0.2 && < 0.6
+               , transformers >= 0.2 && < 0.6

   Ghc-Options: -O2 -Wall

-  Include-Dirs: cbits
-  Install-Includes: primitive-memops.h
-  includes: primitive-memops.h
-  c-sources: cbits/primitive-memops.c
+  -- Include-Dirs: cbits
+  -- Install-Includes: primitive-memops.h
+  -- includes: primitive-memops.h
+  -- c-sources: cbits/primitive-memops.c
+  java-sources: java/Utils.java
   cc-options: -O3 -fomit-frame-pointer -Wall
   if !os(solaris)
       cc-options: -ftree-vectorize
@@ -64,4 +65,4 @@ test-suite test

 source-repository head
   type:     git
-  location: https://github.com/haskell/primitive
+  location: https://github.com/haskell/primitive
\ No newline at end of file
--
2.7.4 (Apple Git-66)
