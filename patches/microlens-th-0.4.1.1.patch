From 1b6dc9924a556c7ea731965970e3d9640dd41a8e Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Wed, 26 Jul 2017 23:21:04 -0400
Subject: [PATCH] Patched

---
 src/Lens/Micro/TH.hs | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/Lens/Micro/TH.hs b/src/Lens/Micro/TH.hs
index 2c7eec9..995cdba 100644
--- a/src/Lens/Micro/TH.hs
+++ b/src/Lens/Micro/TH.hs
@@ -906,14 +906,14 @@ makeClassyClass className methodName s defs = do
 
 
   classD (cxt[]) className (map PlainTV (c:vars)) fd
-    $ sigD methodName (return (''Lens' `conAppsT` [VarT c, s']))
+    $ sigD methodName (return undefined) -- (''Lens' `conAppsT` [VarT c, s']))
     : concat
       [ [sigD defName (return ty)
         ,valD (varP defName) (normalB body) []
         ] ++
         inlinePragma defName
       | (TopName defName, (_, stab, _)) <- defs
-      , let body = appsE [varE '(.), varE methodName, varE defName]
+      , let body = appsE [varE undefined, varE methodName, varE defName]
       , let ty   = quantifyType' (Set.fromList (c:vars))
                                  (stabToContext stab)
                  $ stabToOptic stab `conAppsT`
@@ -931,7 +931,7 @@ makeClassyInstance rules className methodName s defs = do
   methodss <- traverse (makeFieldOptic rules') defs
 
   instanceD (cxt[]) (return instanceHead)
-    $ valD (varP methodName) (normalB (varE 'id)) []
+    $ valD (varP methodName) (normalB (varE undefined)) []
     : map return (concat methodss)
 
   where
@@ -990,28 +990,28 @@ buildScaffold rules s cons defName =
 
      let defType
            | Just (_,cx,a') <- a ^? _ForallT =
-               let optic | lensCase  = ''SimpleGetter
-                         | otherwise = ''SimpleFold
+               let optic | lensCase  = undefined -- ''SimpleGetter
+                         | otherwise = undefined --''SimpleFold
                in OpticSa cx optic s' a'
 
            -- Getter and Fold are always simple
            | not (_allowUpdates rules) =
-               let optic | lensCase  = ''SimpleGetter
-                         | otherwise = ''SimpleFold
+               let optic | lensCase  = undefined -- ''SimpleGetter
+                         | otherwise = undefined -- ''SimpleFold
                in OpticSa [] optic s' a
 
            -- Generate simple Lens and Traversal where possible
            | _simpleLenses rules || s' == t && a == b =
                let optic -- isoCase && _allowIsos rules = ''Iso'
-                         | lensCase                    = ''Lens'
-                         | otherwise                   = ''Traversal'
+                         | lensCase                    = undefined -- ''Lens'
+                         | otherwise                   = undefined --''Traversal'
                in OpticSa [] optic s' a
 
            -- Generate type-changing Lens and Traversal otherwise
            | otherwise =
                let optic -- isoCase && _allowIsos rules = ''Iso
-                         | lensCase                    = ''Lens
-                         | otherwise                   = ''Traversal
+                         | lensCase                    = undefined -- ''Lens
+                         | otherwise                   = undefined -- ''Traversal
                in OpticStab optic s' t a b
 
          opticType | has _ForallT a            = GetterType
@@ -1167,7 +1167,7 @@ makePureClause conName fieldCount =
   do xs <- replicateM fieldCount (newName "x")
      -- clause: _ (Con x1..xn) = pure (Con x1..xn)
      clause [wildP, conP conName (map varP xs)]
-            (normalB (appE (varE 'pure) (appsE (conE conName : map varE xs))))
+            (normalB (appE (varE undefined) (appsE (conE conName : map varE xs))))
             []
 
 -- Construct an optic clause suitable for a Getter or Fold
@@ -1184,8 +1184,8 @@ makeGetterClause conName fieldCount fields =
          pats is     _  = map (const wildP) is
 
          fxs   = [ appE (varE f) (varE x) | x <- xs ]
-         body  = foldl (\a b -> appsE [varE '(<*>), a, b])
-                       (appE (varE 'phantom) (head fxs))
+         body  = foldl (\a b -> appsE [varE undefined, a, b])
+                       (appE (varE undefined) (head fxs))
                        (tail fxs)
 
      -- clause f (Con x1..xn) = coerce (f x1) <*> ... <*> f xn
@@ -1208,12 +1208,12 @@ makeFieldOpticClause conName fieldCount (field:fields) irref =
 
          mkFx i = appE (varE f) (varE (xs !! i))
 
-         body0 = appsE [ varE 'fmap
+         body0 = appsE [ varE undefined
                        , lamE (map varP ys) (appsE (conE conName : map varE xs'))
                        , mkFx field
                        ]
 
-         body = foldl (\a b -> appsE [varE '(<*>), a, mkFx b]) body0 fields
+         body = foldl (\a b -> appsE [varE undefined, a, mkFx b]) body0 fields
 
      let wrap = if irref then tildeP else id
 
-- 
2.7.4 (Apple Git-66)

